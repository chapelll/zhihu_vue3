将输入的input单独封装成一个组件，向其传入rules，rules应该是一个数组
rules: [{
    type: 'required',
    message: '必须填写'
},{
    type: 'email',
    message: '不符合邮箱规则'
},]
inputValid组件内部自己定义一个inputRef，在触发blur事件的时候，将输入的值
(v-model的)与rules进行everys遍历（每个rules中的条件都要判断一次）:

数组的everys方法: 全都为true时返回true，遇到false时立即停止遍历并返回false
    const validateInput = () => {
      //val要经过所有rule的校验
      const allPass = props.rules?.every(rule => {
        console.log(rule);
        let pass = true
        inputRef.message = rule.message
        //因为是switch，是单独每次计算break的
        switch (rule.type) {
          case 'required':
            pass = (inputRef.val.trim() === "")
            break;
          case 'email':
            pass = emailReg.test(inputRef.val)
            break;
          case 'phone':
            pass = phoneReg.test(inputRef.val)
            break;
          default:
            break;
        }
        return pass
      })
      inputRef.error = !allPass
    }

自定义组件的双向绑定逻辑: 父组件定义一个值，使用v-model传入子组件
子组件用props获取到值后，将其绑定到input上，每次input触发输入事件时，
获取到e，将e的值使用$emit触发出去，父组件监听$emit触发的事件，会自动同步到定义的值
vue3规定了modelValue和update:modelValue分别用作子组件传入的值和触发事件

一个非props的attributes被传入组件时会自动添加到根节点，此时可以使用inheritAttrs: false来禁止
根组件的继承。在想要继承非props属性的节点那里使用v-bind="$attrs"即可完成该操作