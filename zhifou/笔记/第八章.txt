jwt运行机制: （token机制，不是cookie机制）
客户端将用户名和密码发送到服务端，服务端根据用户名、密码、时间等信息进行jwt加密，生成
token，并将token返回给客户端.客户端收到token后将它保存起来(localstorage或者sessionstorage)，
在之后的每次请求中都将token放在header中，服务端收到token后会使用jwt反向验证token的信息
，通过后就认为是正确的访问

客户端点击注销就是把token在storage中消除掉，token还具有过期时间

action可以组合配置

登陆后的数据持久化:
使用localStorage存储token
每次进入APP时获取localStorage中的token => 若存在token且用户未登录 => 设置请求头
发送请求 => 请求成功(显示登录用户信息) => 请求失败(清空token)
我的理解: 就是登录后把token保存起来(localStorage),之后每次加载APP.vue时(如果
未登录且有token)去localStorage用token换用户信息(fetchCurrentUser这个接口通过token
拿到用户信息)

在axios的响应拦截器中添加错误处理

函数式组件:
使用createApp方法创建实例
类似于this.$message，将组件使用函数的方式去使用
思路: 使用createApp创建组件实例(传入组件和它的props)，然后使用.mount方法挂载在
document上，最后使用unmount去销毁

JSX: 在js代码中写html标签  const node = <div></div>
使用h方法可以创建虚拟dom,使用render函数进行挂载
